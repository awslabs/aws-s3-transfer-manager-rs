name: Publish to crates.io

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (without v prefix, e.g. 1.2.3)'
        required: true
        type: string
      release_notes:
        description: 'Release notes (Markdown supported)'
        required: false
        type: string
        default: 'See repository for changes in this release.'
      dry_run:
        description: 'Dry run mode (create branch but skip tag creation and use cargo publish --dry-run)'
        required: false
        type: boolean
        default: false

env:
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1
  # Change to specific Rust release to pin
  rust_stable: stable
  rust_nightly: nightly-2024-07-07
  # When updating this, also update relevant docs
  rust_min: '1.81'
  RELEASE_ROLE_ARN: ${{ secrets.RELEASE_ROLE_ARN }}
  TOKEN_KEY_NAME: ${{ secrets.TOKEN_KEY_NAME }}
  AWS_REGION: us-west-2

permissions:
  contents: write  # Write permission to allow pushing to the repository
  id-token: write  # This is required for requesting the JWT

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust ${{ env.rust_nightly }}
        uses: dtolnay/rust-toolchain@stable
        with:
            toolchain: ${{ env.rust_stable }}

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - uses: Swatinem/rust-cache@v2

      - name: Display version to be published
        run: |
          echo "Publishing version ${{ github.event.inputs.version }}"
          echo "Dry run: ${{ github.event.inputs.dry_run }}"

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Update version in Cargo.toml
        run: |
          # Using sed to update the version in Cargo.toml
          sed -i "s/^version = \".*\"/version = \"${{ github.event.inputs.version }}\"/" Cargo.toml
          echo "Updated Cargo.toml to version ${{ github.event.inputs.version }}"
          # Display the updated version line for verification
          grep "^version =" Cargo.toml

      - name: Create release branch and push changes
        run: |
          # Create and checkout release branch
          git checkout -b release-${{ github.event.inputs.version }}

          # Add, commit, and push changes to the new branch
          git add Cargo.toml
          git commit -m "Bump version to ${{ github.event.inputs.version }}"
          git push origin release-${{ github.event.inputs.version }}

          # Only create version tag when not in dry-run mode
          if [ "${{ github.event.inputs.dry_run }}" != "true" ]; then
            git tag -a "v${{ github.event.inputs.version }}" -m "Release v${{ github.event.inputs.version }}"
            git push origin "v${{ github.event.inputs.version }}"
            echo "Created and pushed tag v${{ github.event.inputs.version }}"
          else
            echo "Skipping tag creation in dry-run mode"
          fi

      - name: Create GitHub Release
      # TODO: how to properly cut the release?
        if: ${{ !github.event.inputs.dry_run }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: "Release v${{ github.event.inputs.version }}"
          body: |
            ${{ github.event.inputs.release_notes }}
          draft: false
          prerelease: false

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.RELEASE_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Cargo registry token
        shell: bash
        id: cargo-registry-token
        run: |
          CARGO_REGISTRY_TOKEN=$(aws secretsmanager get-secret-value --secret-id ${{ secrets.TOKEN_KEY_NAME }} --region ${{ env.AWS_REGION }} | jq -r ".SecretString")
          echo "::add-mask::$CARGO_REGISTRY_TOKEN"
          echo "token=$CARGO_REGISTRY_TOKEN" >> $GITHUB_OUTPUT

      - name: Yank previous version (for testing token)
        shell: bash
        env:
          CARGO_REGISTRY_TOKEN: ${{ steps.cargo-registry-token.outputs.token }}
        run: |
          # This version has already been yanked. This command succeeds if we have a token with permission to yank the crate.
          cargo yank aws-sigv4 --version 0.55.0

      - name: Publish (dry-run)
        if: ${{ github.event.inputs.dry_run }}
        shell: bash
        env:
          CARGO_REGISTRY_TOKEN: ${{ steps.cargo-registry-token.outputs.token }}
        run: |
          echo "Running cargo publish in dry-run mode"
          cargo publish --dry-run

      - name: Publish (actual)
        if: ${{ !github.event.inputs.dry_run }}
        shell: bash
        env:
          CARGO_REGISTRY_TOKEN: ${{ steps.cargo-registry-token.outputs.token }}
        run: |
          echo "Publishing to crates.io"
          cargo publish

      - name: Workflow summary
        run: |
          echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch created: release-${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            echo "- Mode: DRY RUN (no tag created, no release created, cargo publish run with --dry-run)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Mode: PRODUCTION" >> $GITHUB_STEP_SUMMARY
            echo "- Tag created: v${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- GitHub Release created: [Release v${{ github.event.inputs.version }}](https://github.com/${{ github.repository }}/releases/tag/v${{ github.event.inputs.version }})" >> $GITHUB_STEP_SUMMARY
            echo "- Package published to crates.io" >> $GITHUB_STEP_SUMMARY
          fi
